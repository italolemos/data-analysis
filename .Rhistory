espadas <-c(1, 4, 5)
rep(espadas, 10)
espadas <-c("CI", "E", "E", "E", "E", "CT", "CT", "CT", "CT", "CT")
rep(espadas, 10)
espadas <-c("CI", "ES", "ES", "ES", "ES", "CT", "CT", "CT", "CT", "CT")
rep(espadas, 10)
length(rep(espadas, 10))
lote <-c("CI", "ES", "ES", "ES", "ES", "CT", "CT", "CT", "CT", "CT")
espadas <- rep(lote, 10)
espadas
amostra = sample(LETTERS, 100, replace=TRUE)
amostra
letras <- factor(amostra, levels=LETTERS, ordered=TRUE)
letras
as.ordered(amostra)
as.ordered(amostra)
child_variants = read.csv('https://www.dropbox.com/s/mlr00tg2n4lf2w6/Child_Variants.csv?dl=1')
new_data <- subset(child_variants, subset = MutantReadPercent >= 70)
new_dataframe <- data.frame(new_data)
most_new_data <- subset(new_dataframe, subset = REF == "C")
most_new_dataframe <- data.frame(most_new_data)
most_new_data
View(most_new_data)
View(most_new_data)
mutacao_para_t <- subset(most_new_data, subset = ALT=="T")
mutacao_para_t
count(mutacao_para_t)
length(mutacao_para_t)
sum(mutacao_para_t)
nrow(mutacao_para_t)
mutacao_para_g <- subset(most_new_data, subset = ALT=="G")
mutacao_para_g
nrow(mutacao_para_g)
mutacao_para_a
mutacao_para_a <- subset(most_new_data, subset = ALT=="A")
mutacao_para_a
nrow(mutacao_para_a)
factor(most_new_data$ALT)
factor(most_new_data$ALT, labels = c("G", "A", "T"))
factor(most_new_data$ALT, levels = c("G", "A", "T"))
x <- factor(most_new_data$ALT, levels = c("G", "A", "T"))
View(x)
table(x)
mutacoes <- factor(most_new_data$ALT, levels = c("G", "A", "T"))
mutation.count <- table(mutacoes)
View(mutation.count)
nrow(mutacao_para_a)
View(most_new_data)
NUMBERS
numbers
numeros <- c(0, 2, 4, 8)
numbers <- 0:9
numeros in numbers
numeros in numbers
mapply(setdiff, numeros, numbers)
mapply(setdiff, numbers, numeros)
numeros <- c(0, 2, 4, 8)
numbers <- c(0:9)
setdiff(numbers, numeros)
numeros <- c(0, 2, 1, 4, 8)
setdiff(numbers, numeros)
numeros <- c(0, 2, 1, 4, 8)
verifica_numeros <- function(x){
numbers <- c(0:9)
return (setdiff(numbers, x))
}
verifica_numeros(numeros)
word <- "abc"
match(LETTERS, word)
match(LETTERS, "a")
match("a", LETTERS)
match("a", letters)
match("ab", letters)
which("ab" %in% letters)
which(letters %in% "ac")
which(letters %in% "a")
match(c("a", "b"), letters)
match(c("a", "c"), letters)
word <- "abc"
strsplit(word, "")
word <- "italo"
posicao <- function(word){
brake_letters <- strsplit(word, "")
return (match(brake_letters, letters))
}
posicao(word)
strsplit("italo", "")
type(strsplit("italo", ""))
class(strsplit("italo", ""))
word <- "italo"
posicao <- function(word){
brake_letters <- c(strsplit(word, ""))
return (match(brake_letters, letters))
}
posicao(word)
word <- strsplit("italo", ""))
word <- strsplit("italo", "")
match(word, letters)
word
class(word)
class(c(word)
dv
word <- strsplit("italo")
word <- strsplit("italo", 0)
word
word <- strsplit("italo", "")
word
word <- c("italo")
posicao <- function(word){
brake_letters <- strsplit(word, "")
return (match(brake_letters, letters))
}
posicao(word)
word
class(word)
word <- vector("italo")
word <- vector(character,"italo")
word <- vector("character","italo")
word <- "italo"
posicao <- function(word){
brake_letters <- unlist(strsplit(word, ""))
return (match(brake_letters, letters))
}
posicao(word)
word <- "abc"
posicao <- function(word){
brake_letters <- unlist(strsplit(word, ""))
return (match(brake_letters, letters))
}
posicao(word)
ST='NAME: Maria /COUNTRY:uruguay /EMAIL: mariaUY@gmail.com'
strsplit(ST, "/")
class(strsplit(ST, "/"))
x <- strsplit(ST, "/")
x
x[1]
x[1][1]
length(x)
x[[1][1]]
x[1][1]
x[1][2]
x <- strsplit(ST, c(":", "/"))
x
x <- strsplit(ST, c(":", " /"))
x
x <- strsplit(ST, c("/", ":"))
x
x <- strsplit(ST, c("/", ":"), fixed = FALSE)
x
strsplit(x, ":")
strsplit(x, ":")
x
x[[1]][1]
x <- strsplit(ST, split = "/|:")
x
x
matrix(a, 2, 2)
matrix(x, 2, 2)
x
matrix(x, 3, 2)
View(matrix(x, 3, 2))
words <- unlist(strsplit(ST, split = "/|:"))
words
matrix(words, 3, 3)
matrix(words, 3, 2)
ST='NAME: Maria /COUNTRY:uruguay /EMAIL: mariaUY@gmail.com'
break_string <- function(ST) {
words <- unlist(strsplit(ST, split = "/|:"))
return(matrix(words, 3, 3))
}
break_string(ST)
ST='NAME: Maria /COUNTRY:uruguay /EMAIL: mariaUY@gmail.com'
break_string <- function(ST) {
words <- unlist(strsplit(ST, split = "/|:"))
return(matrix(words, 3, 2))
}
break_string(ST)
words
lines <- seq(words, by=1)
lines <- seq(words, length(words), by=1)
length(words)
words <- strsplit(ST, split = "/|:")
lines <- seq(words, length(words), by=1)
break_string <- function(ST) {
words <- unlist(strsplit(ST, split = "/|:"))
lines <- array()
for( word in seq(1, length(words), by=1)){
print(word)
}
}
break_string(ST)
break_string <- function(ST) {
words <- unlist(strsplit(ST, split = "/|:"))
lines <- array()
for( word in words)){
print(word)
}
}
break_string(ST)
break_string <- function(ST) {
words <- unlist(strsplit(ST, split = "/|:"))
lines <- array()
for( word in words)){
print(word)
}
}
break_string(ST)
break_string <- function(ST) {
words <- unlist(strsplit(ST, split = "/|:"))
lines <- array()
for( word in words)){
print(word)
}
}
break_string(ST)
break_string <- function(ST) {
words <- unlist(strsplit(ST, split = "/|:"))
lines <- array()
for( word in words){
print(word)
}
}
break_string(ST)
break_string <- function(ST) {
words <- strsplit(ST, split = "/|:")
lines <- array()
for( word in words){
print(word)
}
}
break_string(ST)
break_string <- function(ST) {
words <- strsplit(ST, split = "/:")
lines <- array()
for( word in words){
print(word)
}
}
break_string(ST)
words
words <- strsplit(ST, split = "/")
words
strsplit(words, ":")
strsplit(words, "/:")
strsplit(words, "\:")
strsplit(words, "\\:")
strsplit(words, "//:")
strsplit(ST, ":")
strsplit(words, " ")
break_string <- function(ST) {
words <- unlist(strsplit(ST, split = "/|:"))
lines <- array()
for( word in words){
print(word)
}
}
break_string(ST)
break_string <- function(ST) {
words <- unlist(strsplit(ST, split = "/|:"))
lines <- c(words[1], words[3], words[5], words[2], words[4], words[6])
return(matrix(lines, 3, 2))
}
break_string(ST)
x <- c(32, 12, 30, 53)
labels <- c("Recife", "Durham",
"Toronto", "Amsterdam")
pie(x, labels)
pie(x, labels, main = "Gráfico das Cidades", col = rainbow(4))
pct <- round(x/100)
pct <- round(x/sum(x)*100)
pct <- round(x/sum(x)*100)
pct
sum(x)
lbls <- paste(labels, pct)
lbls
lbls <- paste(lbls, "%", sep="")
pie(x, lbs, main = "Gráfico das Cidades", col = rainbow(4))
lbls <- paste(lbls, "%", sep="")
pie(x, lbs, main = "Gráfico das Cidades", col = rainbow(4))
pct <- round(x/sum(x)*100)
lbls <- paste(labels, pct)
lbls <- paste(lbls, "%", sep="")
pie(x, lbs, main = "Gráfico das Cidades", col = rainbow(4))
pie(x, lbs, main = "Gráfico das Cidades", col = rainbow(4))
pct <- round(x/sum(x)*100)
lbls <- paste(labels, pct)
lbls <- paste(lbls, "%", sep="")
pie(x, labels = lbls, main = "Gráfico das Cidades", col = rainbow(4))
legend("topright", legend = c("Recife", "Durham", "Toronto", "Amsterdam", cex=0.8))
legend("topright", legend = c("Recife", "Durham", "Toronto", "Amsterdam", cex=0.8),
fill = rainbow(length(x)))
legend("topright", legend = c("Recife", "Durham", "Toronto", "Amsterdam"), cex = 0.8,
fill = rainbow(length(x)))
pie(x, labels = lbls, main = "Gráfico das Cidades", col = rainbow(4))
legend("topright", legend = c("Recife", "Durham", "Toronto", "Amsterdam"), cex = 0.8,
fill = rainbow(length(x)))
pie(x, labels = lbls, main = "Gráfico das Cidades", col = rainbow(4))
legend("topright", legend = c("Recife", "Durham", "Toronto", "Amsterdam"), cex = 0.8,
fill = rainbow(length(x)))
boxplot(mtcars$mpg)
boxplot(mpg ~ cyl, data=mtcars,
xlab= 'Numero de cilindros',
ylab = "Milhas por galao",
main = "Dados de milhagem",
)
boxplot(mpg ~ cyl, data=mtcars,
xlab = "Numero de cilindros",
ylab = "Milhas por galao",
main = "Dados de milhagem",
)
boxplot(mpg ~ cyl, data=mtcars, xlab = "Numero de cilindros", ylab = "Milhas por galao", main = "Dados de milhagem")
boxplot(mpg ~ cyl,
data=mtcars,
xlab = "Numero de cilindros",
ylab = "Milhas por galao",
main = "Dados de milhagem",
outline=F)
x<- c(5.1,5.0,4.8,5.0,5.0,4.9,4.9, 4.7)
media <- 4.8
ns <- 0.05
t.test(x, alternative = "two.sided", mu = media, conf.level = ns)
shapiro.test(x)
library(yarrr)
install.packages("yarrr")
library(yarrr)
cor.test(formula = ~ speed + dist, data = cars)
load("/Users/italolemos/Downloads/marketing.rda")
head(marketing)
plot(marketing$youtube, marketing$sales)
cor.test(marketing$sales, marketing$youtube)
model <- lm(sales ~ youtube, data = marketing)
model
media <- 23
ns <- 0.05
t.test(indice, alternative = "two.sided", mu = media, conf.level = ns)
indice <- c(27, 24, 21, 25, 26, 22)
t.test(indice, alternative = "two.sided", mu = media, conf.level = ns)
consumo <- c(300, 400, 350, 450, 100, 220, 150, 500, 900, 800, 600, 150, 50, 170, 370, 200)
media <- 600
t.test(consumo, alternative = "two.sided", mu = media, conf.level = ns)
shapiro.test(consumo)
t.test(ToothGrowth$supp, ToothGrowth$dose, alternative = "two.sided", conf.level = ns)
ToothGrowth$supp
ToothGrowth$dose
antes <- c(635, 704, 662, 560, 603, 745, 698, 575, 633, 669)
depois <- c(640, 712, 681, 558, 610, 740, 707, 585, 635, 682)
t.test(antes, depois, paired = T)
shapiro.test(antes)
shapiro.test(depois)
var.test(antes, depois)
plot(marketing$youtube, marketing$sales)
cor.test(marketing$sales, marketing$youtube)
model <- lm(sales ~ youtube, data = marketing)
model
summary(model)
shapiro.test(residuals(model))
plot(model, 1)
previsao <- data.frame(youtube=c(100, 1000, 5000))
predict(model, previsao)
Sys.getlocale()
Sys.setlocale("LC_ALL", "pt_PT.ISO8859-1")
df <- read.csv("datatran2019.csv", sep=";")
View(df)
setwd("~/Documents/Meu RCurso")
df <- read.csv("datatran2019.csv", sep=";")
View(df)
df <- read.csv("datatran2019.csv", sep=";", encoding = "pt_PT.ISO8859-1")
View(df)
df <- read.csv("datatran2018.csv", sep=";", encoding = "pt_PT.ISO8859-1")
View(df)
library(dplyr)
df1 <- df %>%
filter(uf == "PE")
View(df1)
