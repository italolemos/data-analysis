break_string <- function(ST) {
words <- unlist(strsplit(ST, split = "/|:"))
lines <- array()
for( word in words)){
print(word)
}
}
break_string(ST)
break_string <- function(ST) {
words <- unlist(strsplit(ST, split = "/|:"))
lines <- array()
for( word in words)){
print(word)
}
}
break_string(ST)
break_string <- function(ST) {
words <- unlist(strsplit(ST, split = "/|:"))
lines <- array()
for( word in words){
print(word)
}
}
break_string(ST)
break_string <- function(ST) {
words <- strsplit(ST, split = "/|:")
lines <- array()
for( word in words){
print(word)
}
}
break_string(ST)
break_string <- function(ST) {
words <- strsplit(ST, split = "/:")
lines <- array()
for( word in words){
print(word)
}
}
break_string(ST)
words
words <- strsplit(ST, split = "/")
words
strsplit(words, ":")
strsplit(words, "/:")
strsplit(words, "\:")
strsplit(words, "\\:")
strsplit(words, "//:")
strsplit(ST, ":")
strsplit(words, " ")
break_string <- function(ST) {
words <- unlist(strsplit(ST, split = "/|:"))
lines <- array()
for( word in words){
print(word)
}
}
break_string(ST)
break_string <- function(ST) {
words <- unlist(strsplit(ST, split = "/|:"))
lines <- c(words[1], words[3], words[5], words[2], words[4], words[6])
return(matrix(lines, 3, 2))
}
break_string(ST)
x <- c(32, 12, 30, 53)
labels <- c("Recife", "Durham",
"Toronto", "Amsterdam")
pie(x, labels)
pie(x, labels, main = "Gráfico das Cidades", col = rainbow(4))
pct <- round(x/100)
pct <- round(x/sum(x)*100)
pct <- round(x/sum(x)*100)
pct
sum(x)
lbls <- paste(labels, pct)
lbls
lbls <- paste(lbls, "%", sep="")
pie(x, lbs, main = "Gráfico das Cidades", col = rainbow(4))
lbls <- paste(lbls, "%", sep="")
pie(x, lbs, main = "Gráfico das Cidades", col = rainbow(4))
pct <- round(x/sum(x)*100)
lbls <- paste(labels, pct)
lbls <- paste(lbls, "%", sep="")
pie(x, lbs, main = "Gráfico das Cidades", col = rainbow(4))
pie(x, lbs, main = "Gráfico das Cidades", col = rainbow(4))
pct <- round(x/sum(x)*100)
lbls <- paste(labels, pct)
lbls <- paste(lbls, "%", sep="")
pie(x, labels = lbls, main = "Gráfico das Cidades", col = rainbow(4))
legend("topright", legend = c("Recife", "Durham", "Toronto", "Amsterdam", cex=0.8))
legend("topright", legend = c("Recife", "Durham", "Toronto", "Amsterdam", cex=0.8),
fill = rainbow(length(x)))
legend("topright", legend = c("Recife", "Durham", "Toronto", "Amsterdam"), cex = 0.8,
fill = rainbow(length(x)))
pie(x, labels = lbls, main = "Gráfico das Cidades", col = rainbow(4))
legend("topright", legend = c("Recife", "Durham", "Toronto", "Amsterdam"), cex = 0.8,
fill = rainbow(length(x)))
pie(x, labels = lbls, main = "Gráfico das Cidades", col = rainbow(4))
legend("topright", legend = c("Recife", "Durham", "Toronto", "Amsterdam"), cex = 0.8,
fill = rainbow(length(x)))
boxplot(mtcars$mpg)
boxplot(mpg ~ cyl, data=mtcars,
xlab= 'Numero de cilindros',
ylab = "Milhas por galao",
main = "Dados de milhagem",
)
boxplot(mpg ~ cyl, data=mtcars,
xlab = "Numero de cilindros",
ylab = "Milhas por galao",
main = "Dados de milhagem",
)
boxplot(mpg ~ cyl, data=mtcars, xlab = "Numero de cilindros", ylab = "Milhas por galao", main = "Dados de milhagem")
boxplot(mpg ~ cyl,
data=mtcars,
xlab = "Numero de cilindros",
ylab = "Milhas por galao",
main = "Dados de milhagem",
outline=F)
x<- c(5.1,5.0,4.8,5.0,5.0,4.9,4.9, 4.7)
media <- 4.8
ns <- 0.05
t.test(x, alternative = "two.sided", mu = media, conf.level = ns)
shapiro.test(x)
library(yarrr)
install.packages("yarrr")
library(yarrr)
cor.test(formula = ~ speed + dist, data = cars)
load("/Users/italolemos/Downloads/marketing.rda")
head(marketing)
plot(marketing$youtube, marketing$sales)
cor.test(marketing$sales, marketing$youtube)
model <- lm(sales ~ youtube, data = marketing)
model
media <- 23
ns <- 0.05
t.test(indice, alternative = "two.sided", mu = media, conf.level = ns)
indice <- c(27, 24, 21, 25, 26, 22)
t.test(indice, alternative = "two.sided", mu = media, conf.level = ns)
consumo <- c(300, 400, 350, 450, 100, 220, 150, 500, 900, 800, 600, 150, 50, 170, 370, 200)
media <- 600
t.test(consumo, alternative = "two.sided", mu = media, conf.level = ns)
shapiro.test(consumo)
t.test(ToothGrowth$supp, ToothGrowth$dose, alternative = "two.sided", conf.level = ns)
ToothGrowth$supp
ToothGrowth$dose
antes <- c(635, 704, 662, 560, 603, 745, 698, 575, 633, 669)
depois <- c(640, 712, 681, 558, 610, 740, 707, 585, 635, 682)
t.test(antes, depois, paired = T)
shapiro.test(antes)
shapiro.test(depois)
var.test(antes, depois)
plot(marketing$youtube, marketing$sales)
cor.test(marketing$sales, marketing$youtube)
model <- lm(sales ~ youtube, data = marketing)
model
summary(model)
shapiro.test(residuals(model))
plot(model, 1)
previsao <- data.frame(youtube=c(100, 1000, 5000))
predict(model, previsao)
setwd("~/Documents/Meu RCurso")
df <- read.csv("datatran2018.csv", sep = ";", dec = ",", encoding = "latin1",
na.strings = "", stringsAsFactors = F)
View(df)
dfPernambuco <- df %>%
select(data_inversa, dia_semana, horario, uf, br, km, municipio, causa_acidente, tipo_acidente, classificacao_acidente,
fase_dia, condicao_metereologica, pessoas, mortos, feridos_leves, ilesos, veiculos, latitude, longitude) %>%
filter(uf == "PE")
library(dplyr)
library(ggplot2)
View(dfPernambuco)
View(dfPernambuco)
dfPernambuco <- df %>%
select(data_inversa, dia_semana, horario, uf, br, km, municipio, causa_acidente, tipo_acidente, classificacao_acidente,
fase_dia, condicao_metereologica, pessoas, mortos, feridos_leves, ilesos, veiculos, latitude, longitude) %>%
filter(uf == "PE")
View(dfPernambuco)
df <- read.csv("datatran2018.csv", sep = ";", dec = ",", encoding = "latin1",
na.strings = "")
dfPernambuco <- df %>%
select(data_inversa, dia_semana, horario, uf, br, km, municipio, causa_acidente, tipo_acidente, classificacao_acidente,
fase_dia, condicao_metereologica, pessoas, mortos, feridos_leves, ilesos, veiculos, latitude, longitude) %>%
filter(uf == "PE")
View(dfPernambuco)
condicao_tempo <- dfPernambuco %>%
group_by(br) %>%
summarise(
sol = count(condicao_tempo == "Sol")
)
condicao_tempo <- dfPernambuco %>%
group_by(br) %>%
summarise(
sol = count(condicao_metereologica == "Sol")
)
help("count")
condicao_tempo <- dfPernambuco %>%
group_by(br) %>%
summarise(
sol = count(condicao_metereologica)
)
condicao_tempo <- dfPernambuco %>%
group_by(br) %>%
summarise(
count(condicao_metereologica) == "Sol"
)
condicao_tempo <- dfPernambuco %>%
group_by(br) %>%
tally()
condicao_tempo <- dfPernambuco %>%
group_by(br) %>%
tally(condicao_metereologica)
library(tidyr)
condicao_tempo <- dfPernambuco %>%
select(br, condicao_metereologica) %>%
gather(condicao_metereologica)
View(condicao_tempo)
condicao_tempo <- dfPernambuco %>%
select(br, condicao_metereologica) %>%
gather(br, condicao_metereologica)
View(condicao_tempo)
condicao_tempo <- dfPernambuco %>%
select(br, condicao_metereologica) %>%
gather(br, condicao_metereologica) %>%
group_by(br) %>%
summarise(
n = n()
)
View(condicao_tempo)
condicao_tempo <- dfPernambuco %>%
select(br, condicao_metereologica) %>%
gather(br, condicao_metereologica) %>%
group_by(br, condicao_metereologica) %>%
summarise(
n = n()
)
View(condicao_tempo)
condicao_tempo <- dfPernambuco %>%
select(br, condicao_metereologica) %>%
gather(br, condicao_metereologica) %>%
group_by(br, condicao_metereologica) %>%
drop_na() %>%
summarise(
n = n()
)
View(condicao_tempo)
condicao_tempo <- dfPernambuco %>%
na.omit() %>%
select(br, condicao_metereologica) %>%
gather(br, condicao_metereologica) %>%
group_by(br, condicao_metereologica) %>%
summarise(
n = n()
)
View(condicao_tempo)
fase_dia <- dfPernambuco %>%
na.omit() %>%
select(br, fase_dia) %>%
gather(br, fase_dia) %>%
group_by(br, fase_dia) %>%
summarise(
n = n()
)
View(fase_dia)
fase_dia <- dfPernambuco %>%
na.omit(br) %>%
select(br, fase_dia) %>%
gather(br, fase_dia) %>%
group_by(br, fase_dia) %>%
summarise(
n = n()
)
View(fase_dia)
fase_dia <- dfPernambuco %>%
na.omit() %>%
select(br, fase_dia) %>%
gather(br, fase_dia) %>%
group_by(!is.na(br), fase_dia) %>%
summarise(
n = n()
)
View(fase_dia)
fase_dia <- dfPernambuco %>%
na.omit() %>%
select(br, fase_dia) %>%
gather(br, fase_dia) %>%
group_by(is.na(br), fase_dia) %>%
summarise(
n = n()
)
View(fase_dia)
fase_dia <- dfPernambuco %>%
na.omit() %>%
select(is.na(br), fase_dia) %>%
gather(br, fase_dia) %>%
group_by(br, fase_dia) %>%
summarise(
n = n()
)
fase_dia <- dfPernambuco %>%
select(br, fase_dia) %>%
gather(br, fase_dia) %>%
group_by(br, fase_dia) %>%
na.omit() %>%
summarise(
n = n()
)
View(fase_dia)
fase_dia <- dfPernambuco %>%
select(br, fase_dia) %>%
gather(br, fase_dia) %>%
group_by(br, fase_dia) %>%
drop_na(br)%>%
summarise(
n = n()
)
View(condicao_tempo)
fase_dia <- dfPernambuco %>%
select(br, fase_dia) %>%
gather(br, fase_dia) %>%
group_by(br, fase_dia) %>%
drop_na(br)%>%
summarise(
n = n()
)
View(fase_dia)
fase_dia <- dfPernambuco %>%
select(br, fase_dia) %>%
gather(br, fase_dia) %>%
group_by(br, fase_dia) %>%
drop_na("br") %>%
summarise(
n = n()
)
View(fase_dia)
fase_dia <- dfPernambuco %>%
select(br, fase_dia) %>%
gather(br, fase_dia) %>%
group_by(br, fase_dia) %>%
na.omit("br") %>%
summarise(
n = n()
)
View(fase_dia)
View(na.omit(fase_dia))
x <- na.omit(fase_dia)
View(x)
fase_dia %>% drop_na()
View(fase_dia)
fase_dia %>% drop_na(br)
View(fase_dia)
fase_dia %>% filter(!is.na(br))
View(fase_dia)
fase_dia <- dfPernambuco %>%
select(br, fase_dia) %>%
gather(br, fase_dia) %>%
group_by(br, fase_dia) %>%
filter(!is.na(br)) %>%
summarise(
n = n()
)
View(fase_dia)
fase_dia <- fase_dia %>%
filter(!is.na(br))
View(fase_dia)
fase_dia <- fase_dia %>%
filter(!is.na())
fase_dia <- fase_dia %>%
filter(!is.na(fase_dia[,1]))
fase_dia[,1]
fase_dia <- fase_dia %>%
filter(!is.na(fase_dia$br))
fase_dia <- fase_dia %>%
filter(!is.na(br))
View(fase_dia)
fase_dia <- fase_dia %>%
drop_na(br)
View(fase_dia)
fase_dia <- fase_dia %>%
drop_na(fase_dia$br)
class(fase_dia)
fase_dia <- fase_dia %>%
filter(!is.na(br))
fase_dia <- dfPernambuco %>%
select(br, fase_dia) %>%
gather(br, fase_dia) %>%
group_by(br, fase_dia) %>%
summarise(
n = n()
)
fase_dia <- fase_dia %>%
filter(!is.na(br))
View(fase_dia)
fase_dia <- dfPernambuco %>%
na.omit() %>%
select(br, fase_dia) %>%
gather(br, fase_dia) %>%
group_by(br, fase_dia) %>%
summarise(
n = n()
)
View(fase_dia)
fase_dia$fase_dia
levels(fase_dia$fase_dia)
g <- ggplot(n, aes(br), data = fase_dia)
mpg
mpg$manufacturer
g <- ggplot(fase_dia, aes(br))
g
g + geom_bar(aes(fill=levels(fase_dia$fase_dia)), width = 0.5) +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
acidentes_fase_dia <- dfPernambuco %>%
na.omit() %>%
select(br, fase_dia) %>%
gather(br, fase_dia) %>%
group_by(br, fase_dia) %>%
summarise(
n = n()
)
g <- ggplot(acidentes_fase_dia, aes(br))
View(fase_dia)
View(fase_dia)
View(fase_dia)
remove(fase_dia)
g <- ggplot(acidentes_fase_dia, aes(br))
g + geom_bar(aes(fill=fase_dia), width = 0.5) +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
g + geom_bar(aes(fill=fase_dia), width = 0.5) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) + coord_cartesian(ylim=c(1,700))
View(mpg)
g + geom_bar(aes(fill=fase_dia), width = 0.5) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) + coord_cartesian(ylim=c(1,700))
acidentes_fase_dia <- dfPernambuco %>%
na.omit() %>%
select(br, fase_dia) %>%
gather(br, fase_dia) %>%
group_by(br, fase_dia) %>%
summarise(
acidentes = n()
)
g + geom_bar(aes(fill=fase_dia), width = 0.5) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) + coord_cartesian(ylim=c(1,700))
g + geom_bar(aes(fill=fase_dia), width = 0.5) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) + coord_cartesian(ylim=c(1,700))
acidentes_fase_dia <- dfPernambuco %>%
na.omit() %>%
select(br, fase_dia) %>%
gather(br, fase_dia) %>%
group_by(br, fase_dia) %>%
summarise(
acidentes = n()
)
View(fase_dia)
View(fase_dia)
View(acidentes_fase_dia)
g + geom_bar(aes(fill=fase_dia), width = 0.5) +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
g <- ggplot(acidentes_fase_dia, aes(y=acidentes))
g + geom_bar(aes(fill=fase_dia), width = 0.5) +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
g <- ggplot(acidentes_fase_dia, aes(br, acidentes))
g + geom_bar(aes(fill=fase_dia), width = 0.5) +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
g <- ggplot(acidentes_fase_dia, aes(acidentes))
g + geom_bar(aes(fill=fase_dia), width = 0.5) +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
g <- ggplot(acidentes_fase_dia, aes(x=br, y=acidentes, fill = "Fases"))
g + geom_bar(aes(fill=fase_dia), width = 0.5) +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
g + geom_bar(aes(fill=fase_dia), width = 0.5, stat="identity") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
g <- ggplot(acidentes_fase_dia, aes(x=br, y=acidentes, fill = fase_dia))
g + geom_bar(aes(fill=fase_dia), width = 0.5, stat="identity") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
g <- ggplot(acidentes_fase_dia, aes(x=br, y=acidentes)
g + geom_bar(aes(fill=fase_dia), width = 0.5, stat="identity") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
#+ coord_cartesian(ylim=c(1,700))
View(condicao_tempo)
View(acidentes_fase_dia)
View(mpg)
g <- ggplot(acidentes_fase_dia, aes(x=br, y=acidentes))
g + geom_bar(aes(fill=fase_dia), width = 0.5, stat="identity") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
g + geom_bar(aes(fill=fase_dia), width = 0.5, stat="identity") +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Categorywise Bar Chart",
subtitle="Manufacturer of vehicles",
caption="Source: Manufacturers from 'mpg' dataset")
theme_set(theme_classic())
g + geom_bar(aes(fill=fase_dia), width = 0.5, stat="identity") +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Relação de Acidentes com a Fase do dia ")
g + geom_bar(aes(fill=fase_dia), width = 0.5, stat="identity") +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Relação de acidentes com a aase do dia ")
install.packages("DT")
install.packages("DT")
datatable(head(df), caption = "teste")
df <- read.csv("datatran2018.csv", sep = ";", dec = ",", encoding = "latin1", na.strings = "")
datatable(head(df), caption = "teste")
library(tidyr)    # Organização de dados
library(dplyr)    # Manipulação de dados
library(ggplot2)  # Geração de gráficos
library(DT)       # Criar tabelas funcionais em HTML
View(df)
labs(title="Relação de acidentes com a aase do dia ")
install.packages("zoo")
install.packages("kableExtra")
install.packages("janitor")
install.packages("tm")
install.packages("wordcloud")
install.packages("RColorBrewer")
